swagger: '2.0'

# This is your document metadata
host: "tsp.maas.fi"
basePath: "/v1"
tags:
  - name: Booking
    description: Booking related APIs are the core of a TSP implementation.
    externalDocs:
      description: Documentation in GitHub
      url: "https://github.com/maasglobal/maas-tsp-api/blob/master/specs/Booking.md"
  - name: Feedback
    description: APIs that MaaS will use to mediate user feedback to TSPs
  - name: Admin
    description: Administration APIs to change API keys, GTFS data etc.

info:
  version: v1
  title: MaaS-TSP
  description: |
    This is a API specification of REST endpoints that a Transport Service
    Provider (TSP) should implement to receive messages from MaaS. It is
    written in machine readable [Swagger](http://swagger.io/) format, so that
    API endpoints, validators and test clients can be generated from the
    documentation.
    
    In addition to this documentation, MaaS maintains a [reference
    implementation](https://github.com/maasglobal/maas-tsp-api) with test
    cases. It is also running as a [reference service](https://tsp.maas.global/).
    
    Currently the TSP api consists of:
       * (Booking API (mandatory))[https://github.com/maasglobal/maas-tsp-api/blob/master/specs/Booking.md]
       * (Feedback API (to be defined))
       * (Admin API (to be defined)
  termsOfService: http://api.maas.global/terms/
  contact:
    name: MaaS API Team
    email: developers@maas.fi
    url: http://maas.fi/
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
schemes:
  - https

securityDefinitions:
  key:
    description: |
      MaaS can authenticate using an access token as part of the
      HTTP(S) headers. The keys are sent as part of every request that MaaS
      makes to the TSP API with a `x-api-key` custom header option.
    type: apiKey
    name: x-api-key
    in: header
security:
  - key: []

paths:
  /bookings:
    get:
      description:
        Returns the `Bookings` that have been created through the system.
      tags:
        - Booking
      schemes:
        - https
      consumes:
        - application/json
      produces:
        - application/json
#      parameters:
#        - name: state
#          in: query
#          format: string
      responses:
        200:
          description: The bookings matching the query parameters
          schema:
            type: array
            minItems: 0
            items: 
              $ref: '#/definitions/booking'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/error'
      x-serverless-endpoint: echo~GET

    post:
      description:
        Creates a new `Booking` for the TSP in **booked** state. The returned object will be a refrence that is passed back & forth throughout the booking life cycle. The Booking may be modified in the response, e.g. location being adjusted for a more suitable pick-up location.
      tags:
        - Booking
      schemes:
        - https
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: newBooking
          in: body
          description: New `Booking`data
          required: true
          schema:
            $ref: '#/definitions/newBooking'
      responses:
        200:
          description: A new booking was succesfully created
          schema: 
            $ref: '#/definitions/booking'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/error'

  /bookings/{id}:
    put:
      description:
        Modifies the state of a `Booking`, e.g. **cancels**, **pays** or **reschedules** it.
      tags:
        - Booking
      schemes:
        - https
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Booking id to modify
          required: true
          type: string
        - name: booking
          in: body
          description: New `Booking` data
          required: true
          schema:
            $ref: '#/definitions/booking'
      responses:
        200:
          description: The booking modification was accepted.
          schema: 
            $ref: '#/definitions/booking'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/error'

definitions:
  error:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        type: string

  newBooking:
    type: object
    required:
      - leg
      - customer
    properties:
      leg:
        $ref: '#/definitions/leg'
      customer:
        $ref: '#/definitions/customer'
      meta:
        type: object
      
  booking:
    allOf:
      - $ref: '#/definitions/newBooking'
    properties:
      id:
        type: string
      state:
        $ref: '#/definitions/bookingState'
      terms:
        $ref: '#/definitions/bookingState'
      token:
        $ref: '#/definitions/token'
    required:
      - id
      - state
      - leg
      - customer
      - token

  bookingState: 
    type: string
    enum: 
      - BOOKED
      - CANCELLED
      - PAID
      - UPDATE_REQUESTED
      - UPDATED
      - STARTED
      - FINISHED

  token:
    properties:
      validityDuration:
        type: object
        properties:
          from:
            $ref: '#/definitions/time'
          to:
            $ref: '#/definitions/time'
      meta:
        type: object

  customer:
    type: object
    required:
      - id
      - firstName
      - lastName
    properties:
      id:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
        #pattern: "^(\\+\\d{1,3}\\s|0)?(\\d{2})?(\\d{3,8}$"

#  plan: 
#    type: object
#    additionalProperties: true
#    properties: 
#      from: 
#        $ref: "#/definitions/place"
#      itineraries:
#        $ref: "#/definitions/itineraries"
#    required: 
#      - from
#      - itineraries
#
#  itineraries:
#    type: array
#    minItems: 1
#    items:
#      $ref: "#/definitions/itinerary"
#
#  itinerary: 
#    type: object
#    properties: 
#      startTime: 
#        $ref: "#/definitions/time"
#      endTime: 
#        $ref: "#/definitions/time"
#      waitingTime: 
#        type: integer
#        minimum: 0
#      fare: 
#        $ref: "#/definitions/fare"
#      legs: 
#        type: array
#        minItems: 0
#        items: 
#          $ref: "#/definitions/leg"
#    required: 
#      - startTime
#      - endTime
#      - legs
  
  leg:
    type: object
    additionalProperties: true
    properties: 
      from: 
        $ref: "#/definitions/place"
      to: 
        $ref: "#/definitions/place"
      startTime: 
        $ref: "#/definitions/time"
      endTime: 
        $ref: "#/definitions/time"
      mode: 
        $ref: "#/definitions/mode"
      departureDelay: 
        type: integer
        minimum: 0
      arrivalDelay: 
        type: integer
        minimum: 0
      distance: 
        type: number
        minimum: 0
      fare: 
        $ref: "#/definitions/fare"
      route: 
        type: string
      routeShortName: 
        type: string
      routeLongName: 
        type: string
      agencyId: 
        type: string
      legGeometry: 
        $ref: "#/definitions/legGeometry"
    required: 
      - from
      - to
      - mode
      - startTime
      - endTime
      
  place: 
    type: object
    additionalProperties: true
    properties: 
      name: 
        type: string
      stopId: 
        type: string
      stopCode: 
        type: string
      lat: 
        type: number
        minimum: -90
        maximum: 90
      lon: 
        type: number
        minimum: -180
        maximum: 180
    required: 
      - lon
      - lat
      
  legGeometry: 
    type: object
    additionalProperties: true
    properties: 
      points: 
        type: string
        minLength: 1
  
  time: 
    type: integer
    maximum: 2147483647
    minimum: 0

  fare:
    type: object

  mode: 
    type: string
    enum: 
      - WALK
      - BICYCLE
      - CAR
      - TRAM
      - SUBWAY
      - RAIL
      - BUS
      - FERRY
      - CABLE_CAR
      - GONDOLA
      - FUNICULAR
      - TRANSIT
      - TRAINISH
      - BUSISH
      - LEG_SWITCH