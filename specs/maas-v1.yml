swagger: '2.0'

# This is your document metadata
info:
  version: v1
  title: MaaS-TSP
  description: |
    This is a API specification of REST endpoints that a Transport Service
    Provider (TSP) should implement to receive messages from MaaS. It is
    written in machine readable [Swagger](http://swagger.io/) format, so that
    API endpoints, validators and test clients can be generated from the
    documentation.
    
    In addition to this documentation, MaaS maintains a [reference
    implementation](https://github.com/maasglobal/maas-tsp-api) with test
    cases. It is also running as a [reference service](https://tsp.maas.global/).
    
    Currently the TSP api consists of:
       * Booking API (mandatory)
       * Feedback API (to be defined)
       * Admin API (to be defined)

    The cases of how MaaS interacts with TSP are depicted below:
    
    ![MaaS-TSP Business Process](https://github.com/maasglobal/maas-tsp-api/blob/master/specs/maas-v1-overall.svg "MaaS-TSP Business Process")
    
    ## Booking API
    
    The following scenario explains the life-cycle of an individual trip
    from a TSP viewpoint. Whenever a new concept (such as an actor or action)
    is represented, it is imprinted in **bold**.
    
    This scenario, with a few extra details is detailed in the process diagram
    below. It should be noted from the picture that MaaS more often acts as a
    caller than a callee for Transport Service Provider. 
    
    
    ### Planning a Route
    
    **User** **queries** for a **Route** with an address or latitude-logitude
    pair from one place to another. MaaS queries the route from a third party
    **Routing Engine** that contains the data for **TSP** routes. At this point
    MaaS makes no queries to the TSP - it expects the Routing Engine contains 
    valid GTFS data for the TSP.
    
    **MaaS** shows several possible **Plans**, each containing a valid
    **Route** with several **Legs** with a part of a route using a specific
    TSP.
    
    ### Creating a Booking
    
    User browses through the Plans and chooses to book a trip. For each Leg
    in the Plan Route, MaaS creates a new **Booking** for a TSP.
    It should be noted that the booking may be hours or days in
    advance - a bit like in booking a hotel. The booking contains the
    individual Leg as the detailed travel plan for the TSP, as well as
    customer contact information.
    
    TSP receives the booking and confirms the trip. TSP may modify the details
    of the Booking, such as moving the **start location** to closest known
    street address or delaying the Leg **start time**, as long as the
    **end time** can be guaranteed. The Booking is supplemented with
    **booked** state information and additional **terms** latest such as
    the latest **cancellation time**.

    MaaS checks that the booking succeeded and stores the Booking for future
    reference.
    
    ### Navigating a Route
    
    User starts to navigate the Route. MaaS tracks for the user location to
    know if there are any changes needed in the plan. MaaS triggers the changes
    for bookings by monitoring the individual Legs.
    
    MaaS monitors the Booking terms and Leg **start time**.
    When the actual Leg starts, MaaS **starts** the Leg and notifies the TSP.
    User or TSP may request changes to the Booking, e.g. in a case of a delay
    or cancellation.

    Each of these scenarios are described below.

    ### Updating a Booking
    
    A Booking may be updated by a User, MaaS or TSP when any party receives
    new information that the Leg needs to be changed. Since the update may need
    confirmation from User or a 3rd party system, it is an asynchronous
    operation.
    
    Either party (MaaS or TSP) may send an updated Booking with
    **UPDATE_REQUESTED** state. The recipient processes the request
    asynchronously and either confirms the request with **UPDATED** state,
    sends its proposal with **UPDATE_REQUESTED**, or cancels the leg with
    **CANCELLED** state.

    ### Cancelling a Booking

    A Booking may be cancelled by User or MaaS within **cancellation time** in
    **terms** of the Booking without a specific request. MaaS sends a modified
    Booking with state **CANCELLED** information. TSP confirms and updates its
    own systems.
    
    It should be noted that cancellation is an exception case and is likely
    happen only when the user chooses to cancel the whole route Plan.
    Instead, MaaS and/or TSP should update the booking with new information.
    
    TSP can assume Booking as paid if the cancellation time has passed and no
    cancellation has been received from MaaS.
    
    ### Paying a Booking

    A Booking may be paid (e.g. confirmed) before the **cancellation time**
    in **terms** has expired. MaaS sends a modified Booking with **PAID**
    state wich the TSP confirms.
    
    TSP can assume Booking as paid if the cancellation time has passed and no
    cancellation has been received from MaaS.
    
    ### Error Cases
    
    It may be possible that MaaS sends an invalid request or the TSP cannot
    fulfill a request. In any such case, TSP may respond with an error. If
    TSP responds with an error, MaaS assumes the state was not changed (e.g.
    a transaction was rolled back). MaaS may repeat the request
    with the same or different data later on.
    
    The same principle applies when TSP is communicating with MaaS.

    ## Feedback API
    
    **To be defined**

    ## Admin API
    
    **To be defined**


    ## Overall Information
    
  termsOfService: http://api.maas.global/terms/
  contact:
    name: MaaS API Team
    email: developers@maas.fi
    url: http://maas.fi/
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
schemes:
  - https

tags:
  - name: Booking
    description: |
      Booking related APIs are the core of a TSP implementation.
      Correspondingly, Booking is the main object exchanged between MaaS and
      a TSP.
      
      A Booking contains the essentials of the information, such as the leg
      schedule,  terms of service and customer contact.
      
      Throuhgout the trip life-cycle, its **state** is changed from
      BOOKED to CANCELLED, PAID, UPDATE_REQUESTED, UPDATED, STARTED and
      FINISHED.
      
  - name: Feedback
    description: |
      MaaS collects feedback from the trips and mediates this back to TSP
      when wanted. In order to receive feedback through MaaS, TSP may implement
      these APIs.
      
  - name: Admin
    description: |
      In the future MaaS will implement machine-readable APIs that a TSP may
      use to update GTFS route information, API keys and other information
      that is needed for communicating between MaaS and a TSP.

securityDefinitions:
  key:
    description: |
      MaaS can authenticate using an access token as part of the
      HTTP(S) headers. The keys are sent as part of every request that MaaS
      makes to the TSP API with a `x-api-key` custom header option.
    type: apiKey
    name: x-api-key
    in: header
security:
  - key: []

paths:
  /bookings:
    get:
      description:
        Returns the `Bookings` that have been created through the system.
      tags:
        - Booking
      schemes:
        - https
      consumes:
        - application/json
      produces:
        - application/json
#      parameters:
#        - name: state
#          in: query
#          format: string
      responses:
        200:
          description: The bookings matching the query parameters
          schema:
            type: array
            minItems: 0
            items: 
              $ref: '#/definitions/booking'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/error'
      x-serverless-endpoint: echo~GET

    post:
      description:
        Creates a new `Booking` for the TSP in **booked** state. The returned object will be a refrence that is passed back & forth throughout the booking life cycle. The Booking may be modified in the response, e.g. location being adjusted for a more suitable pick-up location.
      tags:
        - Booking
      schemes:
        - https
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: newBooking
          in: body
          description: New `Booking`data
          required: true
          schema:
            $ref: '#/definitions/newBooking'
      responses:
        200:
          description: A new booking was succesfully created
          schema: 
            $ref: '#/definitions/booking'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/error'

  /bookings/{id}:
    put:
      description:
        Modifies the state of a `Booking`, e.g. **cancels**, **pays** or **reschedules** it.
      tags:
        - Booking
      schemes:
        - https
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Booking id to modify
          required: true
          type: string
        - name: booking
          in: body
          description: New `Booking` data
          required: true
          schema:
            $ref: '#/definitions/booking'
      responses:
        200:
          description: The booking modification was accepted.
          schema: 
            $ref: '#/definitions/booking'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/error'

definitions:
  error:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        type: string

  newBooking:
    type: object
    required:
      - leg
      - customer
    properties:
      leg:
        $ref: '#/definitions/leg'
      customer:
        $ref: '#/definitions/customer'
      meta:
        type: object
      
  booking:
    allOf:
      - $ref: '#/definitions/newBooking'
    properties:
      id:
        type: string
      state:
        $ref: '#/definitions/bookingState'
      terms:
        $ref: '#/definitions/bookingState'
      token:
        $ref: '#/definitions/token'
    required:
      - id
      - state
      - leg
      - customer
      - token

  bookingState: 
    type: string
    enum: 
      - BOOKED
      - CANCELLED
      - PAID
      - UPDATE_REQUESTED
      - UPDATED
      - STARTED
      - FINISHED

  token:
    properties:
      validityDuration:
        type: object
        properties:
          from:
            $ref: '#/definitions/time'
          to:
            $ref: '#/definitions/time'
      meta:
        type: object

  customer:
    type: object
    required:
      - id
      - firstName
      - lastName
    properties:
      id:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
        #pattern: "^(\\+\\d{1,3}\\s|0)?(\\d{2})?(\\d{3,8}$"

#  plan: 
#    type: object
#    additionalProperties: true
#    properties: 
#      from: 
#        $ref: "#/definitions/place"
#      itineraries:
#        $ref: "#/definitions/itineraries"
#    required: 
#      - from
#      - itineraries
#
#  itineraries:
#    type: array
#    minItems: 1
#    items:
#      $ref: "#/definitions/itinerary"
#
#  itinerary: 
#    type: object
#    properties: 
#      startTime: 
#        $ref: "#/definitions/time"
#      endTime: 
#        $ref: "#/definitions/time"
#      waitingTime: 
#        type: integer
#        minimum: 0
#      fare: 
#        $ref: "#/definitions/fare"
#      legs: 
#        type: array
#        minItems: 0
#        items: 
#          $ref: "#/definitions/leg"
#    required: 
#      - startTime
#      - endTime
#      - legs
  
  leg:
    type: object
    additionalProperties: true
    properties: 
      from: 
        $ref: "#/definitions/place"
      to: 
        $ref: "#/definitions/place"
      startTime: 
        $ref: "#/definitions/time"
      endTime: 
        $ref: "#/definitions/time"
      mode: 
        $ref: "#/definitions/mode"
      departureDelay: 
        type: integer
        minimum: 0
      arrivalDelay: 
        type: integer
        minimum: 0
      distance: 
        type: number
        minimum: 0
      fare: 
        $ref: "#/definitions/fare"
      route: 
        type: string
      routeShortName: 
        type: string
      routeLongName: 
        type: string
      agencyId: 
        type: string
      legGeometry: 
        $ref: "#/definitions/legGeometry"
    required: 
      - from
      - to
      - mode
      - startTime
      - endTime
      
  place: 
    type: object
    additionalProperties: true
    properties: 
      name: 
        type: string
      stopId: 
        type: string
      stopCode: 
        type: string
      lat: 
        type: number
        minimum: -90
        maximum: 90
      lon: 
        type: number
        minimum: -180
        maximum: 180
    required: 
      - lon
      - lat
      
  legGeometry: 
    type: object
    additionalProperties: true
    properties: 
      points: 
        type: string
        minLength: 1
  
  time: 
    type: integer
    maximum: 2147483647
    minimum: 0

  fare:
    type: object

  mode: 
    type: string
    enum: 
      - WALK
      - BICYCLE
      - CAR
      - TRAM
      - SUBWAY
      - RAIL
      - BUS
      - FERRY
      - CABLE_CAR
      - GONDOLA
      - FUNICULAR
      - TRANSIT
      - TRAINISH
      - BUSISH
      - LEG_SWITCH